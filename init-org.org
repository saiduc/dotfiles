#+STARTIP: overview

* Dracula Theme
  This is my preferred theme available at the [[https://draculatheme.com/][Dracula Theme Website]]
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t
      :config
      (load-theme 'dracula t))
  #+END_SRC
  
* Mode Line
  I use spaceline for my modeline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      :init
      (setq powerline-default-separator (quote contour))
      (spaceline-spacemacs-theme)
      (powerline-reset))
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  #+END_SRC
  
* Autopair
  Autopair just autocloses brackets and quotations marks
  #+BEGIN_SRC emacs-lisp
    (use-package autopair
      :ensure t
      :config
      (autopair-global-mode))
  #+END_SRC

* Evil
  I am an ex-vim user so I use evil for my editing

  Evil-collection fixes evil mode in many places
  #+BEGIN_SRC emacs-lisp
    (use-package evil-collection
      :ensure t
      :init (setq evil-want-keybinding nil))
      (evil-collection-init)
  #+END_SRC
  
  Evil must be done after Evil collection
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t)
    (add-to-list 'load-path "~/.emacs.d/evil")
    (require 'evil)
    (evil-mode 1)
    (setq evil-insert-state-message nil)
    (setq evil-visual-state-message nil)
    (setq evil-normal-state-tag "NORMAL")
    (setq evil-insert-state-tag "INSERT")
    (setq evil-visual-state-tag "VISUAL")
    (setq evil-emacs-state-tag "EMACS")
  #+END_SRC
  
  Evil commentary is a port of vim's commentary
  #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
      :ensure t)
    (evil-commentary-mode 1)
  #+END_SRC
  
* Iedit
  Iedit allows for multiple cursor-like functionality
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure t)
  #+END_SRC

* Company
  I use company for all my autocompletion needs
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :init
      (global-company-mode))
    (company-tng-configure-default)

    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-tooltip-align-annotations t)
    (setq company-tooltip-limit 15)

    (add-hook 'pdf-view-mode-hook (lambda() (company-mode -1)))
    (add-hook 'eshell-mode-hook (lambda() (company-mode -1)))
    (add-hook 'term-mode-hook (lambda() (company-mode -1)))
  #+END_SRC

* Dashboard
  Dashboard is the starting page when opening emacs
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-items '((recents . 15))))
    (dashboard-setup-startup-hook)
    (add-hook 'dashboard-mode-hook (lambda() (display-line-numbers-mode -1)))
  #+END_SRC

* File Explorer
  I like a Sublime-style sidebar for files so I use neotree
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-smart-open t)
  #+END_SRC

  Neotree requires some icons to work correctly
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
  #+END_SRC

* Which Key 
  I use which key to show me possible keyboard shortcuts
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC

* Exec Path From Shell
  This simply gets the shell variable and path from default shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
  #+END_SRC

* Smex & Ido
  Smex and Ido handle my command completions
  #+BEGIN_SRC emacs-lisp
    (use-package smex
      :ensure t)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  #+END_SRC
  
  I make ido work vertically so it is easier to use
  #+BEGIN_SRC emacs-lisp
    (setq ido-everywhere 1)
    (ido-mode)
    (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
    (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
    (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
    (defun ido-define-keys ()
	(define-key ido-completion-map (kbd "C-j") 'ido-next-match)
	(define-key ido-completion-map (kbd "C-k") 'ido-prev-match))
    (add-hook 'ido-setup-hook 'ido-define-keys)
  #+END_SRC
  
* General Tweaks to Emacs
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode)
    (setq make-backup-files nil)
    (setq auto-save-default nil)

    (setq scroll-margin 0
	  scroll-conservatively 10000
	  scroll-preserve-screen-position t
	  auto-window-vscroll nil)

    (global-display-line-numbers-mode)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-default 'cursor-type 'bar)
    (global-hl-line-mode t)
    (setq ring-bell-function 'ignore)
  #+END_SRC
 
* PDF Tools
  PDF Tools is a better way to view PDFs than Docview, but make sure you install the dependencies
  On Mac, it is brew install pdftools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      ;; install this through brew and not melpa
      (custom-set-variables
	'(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
      (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
      (setq mouse-wheel-follow-mouse t)
      (setq-default pdf-view-display-size 'fit-page))
    (pdf-tools-install)
  #+END_SRC

* Python Language Settings
  I use anaconda-mode for Python
  #+BEGIN_SRC emacs-lisp
    ;; (use-package anaconda-mode
    ;;   :ensure t)
    ;; (add-hook 'python-mode-hook 'anaconda-mode)
    ;; (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  #+END_SRC

  I use anaconda-company for completion
  #+BEGIN_SRC emacs-lisp
    ;; (use-package company-anaconda
    ;;   :ensure t)
    ;; (require 'rx)
    ;; (eval-after-load "company"
    ;;  '(add-to-list 'company-backends 'company-anaconda))
  #+END_SRC
  
  I am testing elpy mode for python development
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t)
    (elpy-enable)
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    (remove-hook 'elpy-modules 'elpy-module-yasnippet)
    (remove-hook 'elpy-modules 'elpy-module-pyvenv)
    (remove-hook 'elpy-modules 'elpy-module-django)
  #+END_SRC
  Elpy works faster and neater than Anaconda-mdoe but I seem to need to restart elpy-rpc everytime I change virtual environment
  
  Conda handles switching virtual environments
  #+BEGIN_SRC emacs-lisp
    (use-package conda
      :ensure t
      :init
      (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
      (setq conda-env-home-directory (expand-file-name "~/miniconda3")))

    (require 'conda)
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
  #+END_SRC
  
  To use ipython notebooks in emacs:
  #+BEGIN_SRC emacs-lisp
    (use-package ein
      :ensure t)
    (setq ein:use-auto-complete-superpack t)
    (setq ein:completion-backend 'ein:use-company-backend)
  #+END_SRC

* LaTeX Language Settings
  I use AucTeX for all LateX stuff, but for some reason, this doesn't install with use-package
  Install it directly from Melpa instead
  #+BEGIN_SRC emacs-lisp
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    (setq TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (setq-default TeX-master t)
    (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq-default fill-column 80)
  #+END_SRC
  
  The completion is handled by Company-AucTeX
  #+BEGIN_SRC emacs-lisp
    (use-package company-auctex
      :ensure t)
    (add-to-list 'load-path "path/to/company-auctex.el")
    (require 'company-auctex)
    (company-auctex-init)
    (eval-after-load "company"
     '(add-to-list 'company-backends 'company-auctex))
  #+END_SRC
  
  Compile with Latexmk, since it works better
  #+BEGIN_SRC emacs-lisp
    (use-package auctex-latexmk
      :ensure t
      :init
      (with-eval-after-load 'tex
	(auctex-latexmk-setup)))

    (defun my-tex-set-latexmk-as-default ()
	(setq TeX-command-default "LatexMk"))
    (add-hook 'TeX-mode-hook #'my-tex-set-latexmk-as-default)

    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  #+END_SRC

  I use PDF tools to view PDFs, and we want it to auto update after compilation
  #+BEGIN_SRC emacs-lisp
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
       TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
       TeX-source-correlate-start-server t)

    (add-hook 'TeX-after-compilation-finished-functions
	   #'TeX-revert-document-buffer)
    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
    (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
  #+END_SRC
  
* Org Mode
  This gets org mode working with python
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
  #+END_SRC
  
  This enables org bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :init
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
  
  Allow export to twitter bootstrap
  #+BEGIN_SRC emacs-lisp
    (use-package ox-twbs
      :ensure t)
  #+END_SRC

* General Key Bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c t") 'ansi-term)
    (global-set-key (kbd "C-c e") 'eshell)
    (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
    (global-set-key (kbd "M-2") '(lambda () (interactive) (insert "â‚¬")))
    (define-key evil-normal-state-map (kbd "g t") 'next-buffer)
    (define-key evil-motion-state-map (kbd "g t") 'next-buffer)
    (define-key evil-normal-state-map (kbd "g T") 'previous-buffer)
    (define-key evil-motion-state-map (kbd "g T") 'previous-buffer)
  #+END_SRC
  
* Diminished Modes
  I diminish modes last since otherwise it doesn't seem to work
  #+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t)
    (diminish 'undo-tree-mode)
    (diminish 'evil-commentary-mode)
    (diminish 'autopair-mode)
    (diminish 'which-key-mode)
    (diminish 'eldoc-mode)
    (diminish 'company-mode)
    (diminish 'highlight-indentation-mode)
  #+END_SRC 

