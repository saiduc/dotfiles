#+STARTIP: overview

* Package Installation Setup
  Here I set up the pacakge repositories we will be pulling from.
  #+BEGIN_SRC emacs-lisp
    (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")))
     (package-initialize)
     ;; (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     ;; (package-initialize)
  #+END_SRC

  If use-package isn't already installed, install it
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC

* General Tweaks to Emacs
  #+BEGIN_SRC emacs-lisp
    (set-frame-font "Monaco 14" nil t)
    (show-paren-mode)
    (setq make-backup-files nil)
    (setq auto-save-default nil)

    (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
    (setq mouse-wheel-scroll-amount '(1)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
    (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 line

    (global-display-line-numbers-mode)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    ;; (set-default 'cursor-type 'bar)
    (global-hl-line-mode t)
    (setq ring-bell-function 'ignore)

    (add-hook 'prog-mode-hook 'hs-minor-mode 1)
    (add-hook 'prog-mode-hook (lambda () (diminish 'hs-minor-mode)))

  #+END_SRC

* Themes
  This is my preferred theme available at the [[https://draculatheme.com/][Dracula Theme Website]] but I am using the atom theme for now as a nice change from dracula
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t
      :defer t
      :init
      (load-theme 'dracula t))

    ;; (use-package atom-one-dark-theme
    ;;   :ensure t
    ;;   :defer t
    ;;   :init
    ;;   (load-theme 'atom-one-dark t))

    ;; (use-package spacemacs-theme
    ;;   :ensure t
    ;;   :defer t
    ;;   :init (load-theme 'spacemacs-dark t))
  #+END_SRC
  
* Mode Line
  I use spaceline for my modeline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :defer t
      ;; :config
      ;; (require 'spaceline-config)
      :init
      ;; (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme)
      ;; (powerline-reset)
      (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))
  #+END_SRC
  
* Autopair
  Autopair just autocloses brackets and quotations marks
  #+BEGIN_SRC emacs-lisp
    (use-package autopair
      :ensure t
      :defer t
      :init
      (autopair-global-mode))
  #+END_SRC

* Evil
  I am an ex-vim user so I use evil for my editing

  Evil-collection fixes evil mode in many places
  #+BEGIN_SRC emacs-lisp
    (use-package evil-collection
      :ensure t
      :defer t
      :init
      (setq evil-want-keybinding nil)
      (evil-collection-init))

    ;; (use-package evil-collection
    ;;   :after evil
    ;;   :defer t
    ;;   :ensure t
    ;;   :init
    ;;   (setq evil-want-keybinding nil)
    ;;   (evil-collection-init))
  #+END_SRC

  Evil must be done after Evil collection
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :defer t
      :init
      ;; (add-to-list 'load-path "~/.emacs.d/evil")
      ;; (require 'evil)
      (evil-mode 1)
      (setq evil-insert-state-message nil)
      (setq evil-visual-state-message nil)
      (setq evil-normal-state-tag "NORMAL")
      (setq evil-insert-state-tag "INSERT")
      (setq evil-visual-state-tag "VISUAL")
      (setq evil-emacs-state-tag "EMACS"))
  #+END_SRC
  
  Evil commentary is a port of vim's commentary
  #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
      :ensure t
      :defer t
      :init
      (evil-commentary-mode 1))
  #+END_SRC

* Iedit
  Iedit allows for multiple cursor-like functionality
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure t)
  #+END_SRC

* Company
  I use company for all my autocompletion needs
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :defer t
      :init
      (global-company-mode)
      (push ".fbd_latexmk" company-files-exclusions)
      (push ".aux" company-files-exclusions)
      (push ".log" company-files-exclusions)
      (push ".pdf" company-files-exclusions)
      ;; (push ".bbl" company-files-exclusions)
      (push ".bcf" company-files-exclusions)
      (push ".gz" company-files-exclusions)
      (push ".blg" company-files-exclusions)
      (push ".fls" company-files-exclusions)
      (setq company-dabbrev-other-buffers t)
      (company-tng-configure-default)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
      (setq company-tooltip-align-annotations t)
      (setq company-tooltip-limit 15)
      (add-hook 'pdf-view-mode-hook (lambda () (company-mode -1)))
      (add-hook 'eshell-mode-hook (lambda () (company-mode -1)))
      (add-hook 'term-mode-hook (lambda () (company-mode -1))))
  #+END_SRC
  
* Dashboard
  Dashboard is the starting page when opening emacs
  #+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :defer t
      :init
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-items '((recents . 15)))
      (dashboard-setup-startup-hook)
      (add-hook 'dashboard-mode-hook (lambda() (display-line-numbers-mode -1))))
  #+END_SRC

* Which Key 
  I use which key to show me possible keyboard shortcuts
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :defer t
      :init
      (which-key-mode))
  #+END_SRC

* Exec Path From Shell
  This simply gets the shell variable and path from default shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :defer t
      :init
      (setq exec-path-from-shell-check-startup-files nil)
      (when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize)))

    ;; (use-package exec-path-from-shell
    ;;   :if (memq window-system '(mac ns x))
    ;;   :ensure t
    ;;   :defer t
    ;;   :init
    ;;   (setq exec-path-from-shell-check-startup-files nil)
    ;;   (exec-path-from-shell-initialize))
  #+END_SRC

* Smex & Ido
  Smex and Ido handle my command completions
  #+BEGIN_SRC emacs-lisp
    (use-package smex
      :ensure t
      :defer t
      :init
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands))
  #+END_SRC
  
  I make ido work vertically so it is easier to use
  #+BEGIN_SRC emacs-lisp
    (setq ido-everywhere 1)
    (ido-mode)
    (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
    (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
    (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
    (defun ido-define-keys ()
    	  (define-key ido-completion-map (kbd "C-j") 'ido-next-match)
    	  (define-key ido-completion-map (kbd "C-k") 'ido-prev-match))
    (add-hook 'ido-setup-hook 'ido-define-keys)
  #+END_SRC

* Emacs Start Up Profiler
  I use esup to help profile my emacs to optimise startup time
  #+BEGIN_SRC elisp
    (use-package esup
      :ensure t
      :defer t)
  #+END_SRC
  
* PDF Tools
  PDF Tools is a better way to view PDFs than Docview
  But it slows down emacs a lot so I have it disabled for now.
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :defer t
      :config
      (custom-set-variables
	'(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
      (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
      (setq mouse-wheel-follow-mouse t)
      (setq-default pdf-view-display-size 'fit-page)
      (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda() (line-number-mode -1)))
      :init
      (pdf-loader-install))
  #+END_SRC

* Python Language Settings
  I am using elpy mode for python development
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :defer t
      :init
      (advice-add 'python-mode :before 'elpy-enable)
      (setq elpy-disable-backend-error-display nil)
      (setq elpy-rpc-error-timeout 30)
      (setq elpy-rpc-timeout 30)
      :config
      (remove-hook 'elpy-modules 'elpy-module-flymake)
      (remove-hook 'elpy-modules 'elpy-module-yasnippet)
      (remove-hook 'elpy-modules 'elpy-module-pyvenv)
      (remove-hook 'elpy-modules 'elpy-module-django)
      (diminish 'highlight-indentation-mode)
      (add-hook 'elpy-mode-hook
	  (lambda ()
	  (define-key elpy-mode-map (kbd "M-]") 'elpy-goto-definition))
	  (define-key elpy-mode-map (kbd "M-[") 'pop-tag-mark))
      (diminish 'hs-minor-mode))
  #+END_SRC
  Elpy works faster and neater than Anaconda-mode but I seem to need to restart elpy-rpc everytime I change virtual environment
  
  Conda handles switching virtual environments
  #+BEGIN_SRC emacs-lisp
    (use-package conda
      :ensure t
      :defer t
      :init
      (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
      (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
      :config
      ;; (require 'conda)
      (conda-env-initialize-interactive-shells)
      (conda-env-initialize-eshell))
  #+END_SRC
  
  To use ipython notebooks in emacs:
  #+BEGIN_SRC emacs-lisp
    (use-package ein
      :ensure t
      :defer t
      :config
      (setq ein:use-auto-complete-superpack t)
      (setq ein:completion-backend 'ein:use-company-backend))
  #+END_SRC
  
* LaTeX Language Settings
  # I use AucTeX for all LateX stuff, but for some reason, this doesn't always work through use-package
  # Install it directly from Melpa instead
  #+BEGIN_SRC emacs-lisp
    (use-package auctex
      :ensure t
      :defer t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    (setq TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (setq-default TeX-master t)
    (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq-default fill-column 80)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
  #+END_SRC
  
  The completion is handled by Company-AucTeX
  #+BEGIN_SRC emacs-lisp
    (use-package company-auctex
      :ensure t
      :defer t
      :init
      (company-auctex-init))

    (use-package company-reftex
      :ensure t
      :defer t
      :init
      (eval-after-load "company"
	'(add-to-list 'company-backends 'company-reftex-labels))
      (eval-after-load "company"
	'(add-to-list 'company-backends 'company-reftex-citations))
      ;; (add-hook 'LaTeX-mode-hook (lambda () (turn-on-reftex)))
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t))

    ;; (add-to-list 'load-path "path/to/company-auctex.el")
    ;; (require 'company-auctex)
    ;; (eval-after-load "company"
    ;;   '(add-to-list 'company-backends 'company-auctex))
  #+END_SRC
  
  Compile with Latexmk, since it works better
  #+BEGIN_SRC emacs-lisp
    (use-package auctex-latexmk
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'tex
	(auctex-latexmk-setup))
      (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "LatexMk")))
      (setq auctex-latexmk-inherit-TeX-PDF-mode t))
  #+END_SRC

  I use PDF tools to view PDFs, and we want it to auto update after compilation
  #+BEGIN_SRC emacs-lisp
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
	  TeX-source-correlate-start-server t)

    (add-hook 'TeX-after-compilation-finished-functions
	   #'TeX-revert-document-buffer)

    ;; (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  #+END_SRC
  
* Org Mode
  This gets org mode working with python
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))
  #+END_SRC
  
  # Allow export to beamer
  # #+BEGIN_SRC emacs-lisp
  #   (use-package ox-beamer
  #     :config
  #     (eval-after-load "ox-latex"
  # 	'(add-to-list 'org-latex-classes
  # 		      `("beamer"
  # 			,(concat "\\documentclass[presentation]{beamer}\n"
  # 			       "[DEFAULT-PACKAGES]"
  # 			       "[PACKAGES]"
  # 			       "[EXTRA]\n")
  # 			("\\section{%s}" . "\\section*{%s}")
  # 			("\\subsection{%s}" . "\\subsection*{%s}")
  # 			("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
  # #+END_SRC
  
* General Key Bindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c t") 'ansi-term)
    (global-set-key (kbd "C-c e") 'eshell)
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (define-key key-translation-map (kbd "M-3") (kbd "#"))
    (define-key key-translation-map (kbd "M-2") (kbd "€"))
  #+END_SRC

* Diminished Modes
  I diminish modes last since otherwise it doesn't seem to work
  #+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :defer t
      :init
      (diminish 'undo-tree-mode)
      (diminish 'hs-minor-mode)
      (diminish 'evil-commentary-mode)
      (diminish 'eldoc-mode)
      (diminish 'autopair-mode)
      (diminish 'which-key-mode)
      (diminish 'company-mode)
      (diminish 'highlight-indentation-mode))
  #+END_SRC 
  
