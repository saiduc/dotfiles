#+TITLE: Emacs Configuration
#+AUTHOR: Sai Pandian
#+EMAIL: saipandian97@gmail.com
#+STARTUP: overview 

* Setting up New Installation
Make a small change to this file, delete the change, and then save the file.
Emacs will compile the file and install all necessary packages.
You may need to change the locations of some paths and add your own api
credentials. 

* Better Defaults
These are some minor tweaks to the default look and behaviour of Emacs
#+begin_src emacs-lisp
;; start emacs in home folder
(cd "~")

;; disable a weird warning that pops up in Emacs 27
(setq byte-compile-warnings '(cl-functions))

;; show matching parentheses by default
(show-paren-mode)

;; autopair parentheses and quotations
(electric-pair-mode 1)

;; disable auto-save and auto-backup
(setq make-backup-files nil)
(setq auto-save-default nil)

;; turn off annoying Emacs splash screen
(setq inhibit-splash-screen t)

;; disable some warnings when compiling init file
(setq warning-minimum-level :error)

;; allow y-or-n instead of yes-or-no
(defalias 'yes-or-no-p 'y-or-n-p)

;; always follow symbolic links
(setq vc-follow-symlinks t)

;; scroll properly, not stupid emacs way
(setq scroll-conservatively 101)
(setq mouse-wheel-scroll-amount '(1))
(setq mouse-wheel-progressive-speed nil)

;; refresh buffers if they are changed outside of emacs
(global-auto-revert-mode 1)

;; show line number and ruler when programming, and enable code folding
(add-hook 'prog-mode-hook (lambda () 
			    (display-fill-column-indicator-mode 1)
			    (display-line-numbers-mode 1)
			    (hs-minor-mode 1)
			    (diminish 'hs-minor-mode)))

;; turn off bell
(setq ring-bell-function 'ignore)

;; create eshell alias for find-file function
(defalias 'ff 'find-file)

;; enable emacs server
(server-mode 1)

;; turn off indicator for wrapping text
(setf (cdr (assq 'continuation fringe-indicator-alist))
      '(nil nil))

;; disable *Messages* buffer that is present on startup
(setq-default message-log-max nil)
(kill-buffer "*Messages*")

;; set default wrap length
(setq-default fill-column 80)

;; maximise frame
(toggle-frame-maximized)
#+end_src

* MacOS Specific
Some macOS specific options. Comment out if not on a macOS machine

Get transparent header-bars
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar .t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
#+end_src

Open new files from Finder in previously opened frame
#+begin_src emacs-lisp
(setq ns-pop-up-frames nil)
#+end_src

Remap red close button to only hide the frame
#+begin_src emacs-lisp
(defun handle-delete-frame-without-kill-emacs (event)
  "Handle delete-frame events from the X server."
  (interactive "e")
  (let ((frame (posn-window (event-start event)))
	(i 0)
	(tail (frame-list)))
    (while tail
      (and (frame-visible-p (car tail))
	   (not (eq (car tail) frame))
	   (setq i (1+ i)))
      (setq tail (cdr tail)))
    (if (> i 0)
	(delete-frame frame t)
      ;; Not (save-buffers-kill-emacs) but instead:
      (ns-do-hide-emacs))))
      ;; can change to (suspend-frame) on non mac systems
(when (eq system-type 'darwin)
  (advice-add 'handle-delete-frame :override
	      #'handle-delete-frame-without-kill-emacs))
#+end_src

Get proper characters on ISO-UK Macbook Pro keyboard
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "M-3") (kbd "#"))
(define-key key-translation-map (kbd "M-2") (kbd "â‚¬"))
#+end_src

* Themes
A nice collection of themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :defer t)
#+end_src

Load selected theme
#+begin_src emacs-lisp
(load-theme 'doom-dracula t)
#+end_src

* Mode Line
I use doom modeline since it is lightweight and pretty
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :diminish
  :init
  (set-face-attribute 'mode-line nil
                      :background "#353644"
                      :foreground "white"
                      :overline nil
                      :underline nil)
  (setq doom-modeline-height 10)
  (setq doom-modeline-bar-width 1)
  (setq doom-modeline-icon nil)
  (setq doom-modeline-minor-modes t)
  (setq doom-modeline-perp-name t)
  (setq doom-modeline-lsp t)
  (setq doom-modeline-env-version nil)
  :config
  (doom-themes-org-config)
  (doom-modeline-mode 1))
#+end_src

* Magit
Magit is a wonderful git frontend for emacs
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))
#+end_src

* Evil
I am an ex-vim user so I use evil for my editing
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  ;; :defer 0.01
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-insert-state-message nil)
  (setq evil-visual-state-message nil)
  (setq evil-mode-line-format '(before . mode-line-front-space))
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-visual-state-tag "VISUAL")
  (setq evil-operator-state-tag "OPERATOR")
  (setq evil-motion-state-tag "MOTION")
  (setq evil-emacs-state-tag "EMACS")
  (setq evil-want-C-i-jump nil)
  :bind (("<escape>" . keyboard-escape-quit)
	   ("C-c h" . evil-window-left)
	   ("C-c j" . evil-window-down)
	   ("C-c k" . evil-window-up)
	   ("C-c l" . evil-window-right)
	   ("C-c H" . evil-window-move-far-left)
	   ("C-c J" . evil-window-move-very-bottom)
	   ("C-c K" . evil-window-move-very-top)
	   ("C-c L" . evil-window-move-far-right))
  :config
  (evil-mode 1))
#+end_src

Evil collection fixes evil-mode in a lot of places
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

Undo-tree is a dependancy, but is not installed automatically for some reason
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+end_src

Port of vim commentary plugin
#+begin_src emacs-lisp
(use-package evil-commentary
  :ensure t
  ;; :after evil
  :diminish
  :config
  (evil-commentary-mode 1))
#+end_src

Port of vim surround plugin
#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  ;; :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

* Company
I use company for all my autocompletion needs
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer t
  :diminish
  :init
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 15)
  :hook ((prog-mode . company-mode)
	   (tex-mode . company-mode)
	   (org-mode . company-mode))
  :config
  (company-mode 1)
  (push ".fbd_latexmk" company-files-exclusions)
  (push ".aux" company-files-exclusions)
  (push ".log" company-files-exclusions)
  (push ".pdf" company-files-exclusions)
  (push ".bcf" company-files-exclusions)
  (push ".gz" company-files-exclusions)
  (push ".blg" company-files-exclusions)
  (push ".fls" company-files-exclusions)
  (delete 'company-dabbrev company-backends))
#+end_src

* Projectile
I use projectile to manage projects
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :bind-keymap
  ("C-x p" . projectile-command-map))
#+end_src

* Which Key
Which key is useful for discoverability
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :defer 0.01
  :diminish
  :init
  (setq which-key-idle-delay 2)
  (setq which-key-idle-secondary-delay 0)
  :config
  (which-key-mode))
#+end_src

* Exec Path From Shell
This simply gets the shell variable and path from default shell
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (use-package exec-path-from-shell
    :ensure t
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (exec-path-from-shell-initialize)))
#+end_src

* Vterm
I use vterm as my terminal because it is a lot better than ansi-term. You will
need to have some dependencies installed for this, which can be done in mac with: 
brew install cmake libtool libvterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :defer t
  :bind (("C-c t t" . vterm)
	   ("C-c t e" . eshell)))
#+end_src

* Perspective Mode
I use this for managing workspaces inside Emacs
#+begin_src emacs-lisp
(use-package perspective
  :ensure t
  :defer 0.01
  :bind
  (("C-x C-i" . persp-ibuffer)
   ("C-x k" . persp-kill-buffer*)
   ("C-x C-k" . persp-kill-buffer*)
   ("C-x x h" . persp-prev)
   ("C-x x l" . persp-next)
   ("C-x x s" . persp-switch)
   ("C-x x i" . persp-import)
   ("C-x x r" . persp-rename)
   ("C-x x C-l" . persp-state-load)
   ("C-x x C-s" . persp-state-save))
  :init
  (custom-set-faces '(persp-selected-face ((t (:foreground "#FD7CC5")))))
  (setq  ido-ignore-buffers '("\\` " "^\*helm"))
  :config
  (persp-mode 1))
#+end_src

* Helm
I use helm for completion
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish
  :defer 0.01
  :init
  (setq projectile-completion-system 'helm)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-apropos-fuzzy-match t)
  (setq helm-split-window-in-side-p t)
  (setq helm-move-to-line-cycle-in-source nil)
  (setq helm-display-header-line nil)
  (add-to-list 'display-buffer-alist
	       `(,(rx bos "*helm" (* not-newline) "*" eos)
		 (display-buffer-in-side-window)
		 (inhibit-same-window . t)
		 (window-height . 0.3)))
  :bind
  (("C-x C-f" . helm-find-files)
   ("M-p" . helm-show-kill-ring)
   ("M-x" . helm-M-x)
   ("C-x b" . helm-mini)
   ("C-x C-b" . helm-mini)
   ("C-s" . helm-occur)
   ("C-x r b" . helm-bookmarks)
   (:map helm-find-files-map
	 ("C-h" . helm-find-files-up-one-level))
   (:map helm-map
	 ("C-j" . helm-next-line)
	 ("C-k" . helm-previous-line)
	 ("<tab" . helm-execute-persistent-action)
	 ("C-i" . helm-execute-persistent-action)
	 ("C-z" . helm-select-action)))
   :config
   (helm-mode 1))
#+end_src

* Dashboard
This gives a nice startup page when Emacs first runs
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  ;; (setq dashboard-startup-banner "~/.config/emacs/dashboard_banner.png")
  ;; (setq dashboard-banner-logo-title "It is only with the heart that one can see rightly; what is essential is invisible to the eye.")
  (setq dashboard-banner-logo-title "Everything will be okay in the end; if it's not okay, it's not the end")
  (setq dashboard-footer-messages '("Sai Pandian"))
  ;; (setq dashboard-set-init-info nil)
  (setq dashboard-items '((recents  . 15)
			  (projects . 5)))
  (setq dashboard-set-heading-icons nil)
  (setq dashboard-set-file-icons nil)
  (setq dashboard-center-content t)
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Dired
This makes dired work as expected
#+begin_src emacs-lisp
(use-package dired
  :defer t
  :config
  (put 'dired-find-alternate-file 'disabled nil))
#+end_src

* PDF Tools
This lets me view PDFs in Emacs (better than simply with doc-view)
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :defer t
  :pin manual ;; don't reinstall when package updates
  :mode  ("\\.pdf\\'" . pdf-view-mode)
  :bind
  ((:map pdf-view-mode-map ("C-s" . isearch-forward)))
  :init
  (setq-default pdf-view-display-size 'fit-page)
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-midnight-colors '("#ffffff" . "#000000"))
  :config
  (pdf-tools-install :no-query)
  (require 'pdf-occur))
#+end_src

* Org Mode
I use org mode extensively so this is quite a long section...
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :defer t
  :init

  ;; agenda files, refile targets and drawer targets
  (setq org-agenda-files (directory-files-recursively "~/Dropbox/Org/" "\\.org$"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (setq org-log-into-drawer "LOGBOOK")

  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

  ;; make custom function that refreshes org files
  (defun my/refresh-org-files ()
    (interactive)
    (setq org-agenda-files (directory-files-recursively "~/Dropbox/Org/" "\\.org$"))
    (setq org-refile-targets '((org-agenda-files :maxlevel . 1))))

  ;; make custom function to list all org files 
  (defun my/list-org-files ()
    (interactive)
    (require 'helm)
    (projectile-find-file-in-directory "~/Dropbox/Org/"))

  ;; some general settings
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-hide-leading-stars nil)
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-acts-natively t)
  (setq org-agenda-default-appointment-duration 30)
  (setq org-log-done 'time)
  (setq org-ellipsis " âŒ„")
  (setq org-export-with-smart-quotes t)

  (setq org-todo-keywords
        '((sequence "TODO" "WAIT" "SOMEDAY" "|" "DONE" "CANCELLED")))

  ;; heading sizes
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   '(org-document-title ((t :height 1.5)))
   )

  :hook ((org-mode . auto-fill-mode)
         (org-mode . visual-line-mode)
         (org-mode . display-line-numbers-mode)
	   (org-mode . (lambda ()
	                 (setq-local electric-pair-inhibit-predicate
	          		     `(lambda (c)
	          			(if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
  
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c f" . my/list-org-files))

  :config

  ;; hook goes here since org-babel-after-execute-hook is not available prior to loading org mode package
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

  ;; better looking org-agenda
  (setq org-agenda-custom-commands
	'(("n" "Custom agenda view"
	   (
	    (agenda)
	    (todo "TODO")
	    (todo "WAIT")
	    (todo "SOMEDAY")
	    ))))
  (setq org-agenda-prefix-format
	(quote
	 ((agenda . "%-20c%?-13t% s")
          (timeline . "% s")
          (todo . "%-20:c ")
          (tags . "%-20c")
          (search . "%-20c"))))

  ;; evil bindings for org-agenda
  (eval-after-load 'org-agenda
    '(progn
       (evil-set-initial-state 'org-agenda-mode 'normal)
       (evil-define-key 'normal org-agenda-mode-map
	 (kbd "<RET>") 'org-agenda-switch-to
	 (kbd "\t") 'org-agenda-goto
	 "q" 'org-agenda-quit
	 "r" 'org-agenda-redo
	 "f" 'org-agenda-later
	 "b" 'org-agenda-earlier
	 )))

  (org-babel-do-load-languages 
   'org-babel-load-languages 
   '((emacs-lisp . t)
     (python     . t)
     (jupyter    . t)))
  
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-modules 'org-habit t))
#+end_src

Set up LaTeX export classes and settings
#+begin_src emacs-lisp
(use-package ox-latex
  :defer t
  :after org
  :init
  
  ;; set some nice margins
  (setq org-latex-packages-alist '(("tmargin=0.85in, bmargin=0.85in, lmargin=0.85in, rmargin=0.85in" "geometry" nil)))

  ;; tell org to make pdfs using latexmk
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  :config
  ;; ieeetr class
  (add-to-list 'org-latex-classes
	       '("ieeetr"
		 "\\documentclass[journal]{IEEEtran}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  ;; thesis class
  (add-to-list 'org-latex-classes
	       '("thesis"
		 "\\documentclass[12pt, twoside]{report}"
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  ;; for beamer presentations
  (use-package ox-beamer)

  ;; some default settings to make documents look nice
  (add-to-list 'org-latex-default-packages-alist
	       '("linktocpage,
                pdfstartview=FitH,
                colorlinks, 
                linkcolor=blue,
                anchorcolor=blue, 
                citecolor=blue,
                filecolor=blue,
                menucolor=blue,
                urlcolor=blue"
	          "hyperref" nil) t)
  (setq org-latex-default-packages-alist
	(-remove-item
	 '("" "hyperref" nil)
	 org-latex-default-packages-alist)))
#+end_src

* Org Ref
I use Org Ref to handle citations in Org mode
#+begin_src emacs-lisp
(use-package org-ref
  :ensure t
  :after org
  :init
  (setq bibtex-autokey-year-length 4
	  bibtex-autokey-name-year-separator "-"
	  bibtex-autokey-year-title-separator "-"
	  bibtex-autokey-titleword-separator "-"
	  bibtex-autokey-titlewords 2
	  bibtex-autokey-titlewords-stretch 1
	  bibtex-autokey-titleword-length 5)
  (setq helm-bibtex-full-frame nil)
  :hook (org-mode . (lambda ()
		      (require 'org-ref)
		      (require 'org-ref-pdf)
		      (require 'org-ref-url-utils)))
  :config
  ;; keybinding has to go here otherwise it doesn't work
  (define-key org-mode-map (kbd "C-c [") 'org-pageref-insert-ref-link)
  (setq bibtex-completion-display-formats
	'((t . "${author:50} ${title:130} ${year:7} ${=type=:7}"))))
#+end_src

* Org Superstar
This enables nice looking icons in org-headings
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :defer t
  :init
  (setq org-superstar-configure-like-org-bullets t)
  :hook (org-mode . org-superstar-mode))
#+end_src

* Org Capture Templates
Some capture templates that suit my workflow
#+begin_src emacs-lisp
(setq org-capture-templates
      '(

	("n" "Quick Note" entry (file "~/Dropbox/Org/Inbox.org")
	 "* %?" :empty-lines 0)
	
	("e" "Quick Event" entry (file "~/Dropbox/Org/Inbox.org")
	 "* %?\n%^T")
	
	("p" "Quick Task - Personal" entry (file "~/Dropbox/Org/Inbox.org")
	 "* TODO %?" :empty-lines 0)
	
	("w" "Quick Task - Work" entry (file "~/Dropbox/Org/Inbox.org")
       "* TODO %?\n%i%a" :empty-lines 0)
	
	("f" "Monthly Finance Review" entry (file+olp+datetree "~/Dropbox/Org/Personal/Finance.org" "Monthly Review Log")
	 "** Monthly Finance Review [0/4] \n- [ ] Check Expenditure and Balance in Yolt\n- [ ] Update [[file+sys:~/Google Drive/Budgets/budget_20_21.xlsx][Budget Spreadsheet]]\n- [ ] Move Extra Revolut into Vault\n- [ ] Transfer money into Revolut\n- [ ] Mark TODO as DONE" :empty-lines 0 :jump-to-captured t :kill-buffer t)
	))
#+end_src

* YASnippets
This package provides snippet insertion
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :diminish yas-minor-mode
  :hook ((prog-mode . yas-minor-mode)
         (latex-mode . yas-minor-mode)))
#+end_src

A collection of useful snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t
  :defer t)
#+end_src

* Flyspell
On the go spell-checking in Emacs You will need to install aspell on your system
for this to work. On MacOS: brew install aspell
#+begin_src emacs-lisp
(use-package flyspell
  :defer t
  :diminish flyspell-mode
  :init
  (setq ispell-program-name "/usr/local/bin/aspell") 
  (setq ispell-dictionary "british")
  :hook ((latex-mode . flyspell-mode)
	   (text-mode . flyspell-mode)))
#+end_src

* Flycheck
Use flycheck as the syntax checker
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish flycheck-mode
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save)))
#+end_src

* LSP Mode
Language servers handle most of my languages
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :defer t
  :diminish lsp-mode
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-l")
  (setq lsp-prefer-flymake nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-signature-auto-activate t)
  (setq lsp-signature-doc-lines 1)
  (setq lsp-signature-render-documentation nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  :bind (:map lsp-mode-map (("M-]" . lsp-find-definition)
			      ("M-[" . xref-pop-marker-stack))))

(use-package helm-lsp
  :ensure t
  :defer t
  :commands helm-lsp-workspace-symbol)
#+end_src

* Python
I use the pyright server for Python which needs npm installed
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :defer t
  :diminish eldoc-mode
  :hook ((python-mode . (lambda () (require 'lsp-pyright)))
	   (python-mode . lsp-deferred))
  :config
  ;; these hooks can't go in the :hook section since lsp-restart-workspace
  ;; is not available if lsp isn't active, so it messes up jupyter
  (add-hook 'conda-postactivate-hook (lambda () (lsp-restart-workspace)))
  (add-hook 'conda-postdeactivate-hook (lambda () (lsp-restart-workspace))))
#+end_src

Conda handles switching virtual environments
#+BEGIN_SRC emacs-lisp
(use-package conda
  :ensure t
  :defer t
  :init
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  :config
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))
#+END_SRC

Turn off annoying python start message
#+begin_src emacs-lisp
(setq python-indent-guess-indent-offset-verbose nil)
#+end_src

Get nice sphinx doc generation
#+begin_src emacs-lisp
(use-package sphinx-doc
  :ensure t
  :defer t
  :diminish sphinx-doc-mode
  :hook (python-mode . sphinx-doc-mode))
#+end_src

* Jupyter
I use Emacs Jupyter for jupyter notebooks
#+begin_src emacs-lisp
(use-package jupyter
  :ensure t
  :defer t
  :after org
  :init
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3")))
  (add-to-list 'org-structure-template-alist '("j" . "src jupyter-python"))

  ;; function to load jupyter package and get kernelspecs from current python env
  (defun my/get-jupyter-aliases ()
    (require 'jupyter)
    (org-babel-jupyter-aliases-from-kernelspecs))

  :bind (:map jupyter-org-interaction-mode-map ("C-c h" . nil))
  
  :hook ((conda-postactivate . my/get-jupyter-aliases)
	   (conda-postdeactivate . my/get/jupyter-aliases)))
#+end_src

Set up export to Jupyter notebooks
#+begin_src emacs-lisp
(use-package ox-ipynb
  :defer t
  :after org
  :hook (org-mode . (lambda () (require 'ox-ipynb))))
#+end_src

Function to run jupyter-lab command and open xwidget buffer with client
#+begin_src emacs-lisp
(defun my/jupyter-lab ()
  (interactive)
  (async-shell-command "bash ~/dotfiles/scripts/run_jupyter_in_emacs.sh")
  (switch-to-buffer-other-window "*Async Shell Command*")
  (delete-window))
#+end_src

* LaTeX
I use the TexLab language server for LaTeX
Install using: brew install texlab
#+begin_src emacs-lisp
(use-package lsp-latex
  :ensure t
  :defer t
  :hook ((tex-mode . lsp)
	   (tex-mode . (lambda () (require 'lsp-latex)))
	   (latex-mode . lsp)
	   (bibtex-mode . lsp)
	   (latex-mode . (lambda () 
			 (define-key tex-mode-map (kbd "C-c C-c") 'my/latex-build)
			 (define-key tex-mode-map (kbd "C-c C-v") 'my/open-pdf)))
	   (latex-mode . auto-fill-mode)
	   (latex-mode . visual-line-mode)
	   (latex-mode . display-fill-column-indicator-mode)
	   (latex-mode . display-line-numbers-mode))
  :init
  (setq lsp-latex-lint-on-change t)
  (setq lsp-latex-lint-on-save t)

  ;; function to open pdf associated with tex file
  (defun my/open-pdf ()
    (interactive)
    (buffer-file-name (other-buffer))
    ;; can do find-file instead of browse-url to open inside emacs
    (browse-url (replace-regexp-in-string ".tex" ".pdf" buffer-file-name)))
  
  ;; function to save and build latex file
  (defun my/latex-build ()
    (interactive)
    (save-buffer)
    (lsp-latex-build)))
#+end_src

* C/C++
I use the clangd server for C++.
Install using: brew install llvm
Make sure llvm is on your path.
#+begin_src emacs-lisp
(use-package cc-mode
  :defer t
  :hook (c++-mode . lsp-deferred)
  :init
  (setq c-default-style "linux"))
#+end_src

