#+TITLE: Emacs Configuration
#+AUTHOR: Sai Pandian
#+EMAIL: saipandian97@gmail.com
#+STARTUP: overview

* Table of Contents                                                     :TOC:
- [[#setting-up-new-installation][Setting up New Installation]]
- [[#better-defaults][Better Defaults]]
- [[#macos-specific][MacOS Specific]]

* Setting up New Installation
Make a small change to this file, delete the change, and then save the file.
Emacs will compile the file and install all necessary packages.
You may need to change the locations of some paths and add your own api
credentials. 

* Better Defaults
These are some minor tweaks to the default look and behaviour of Emacs
#+begin_src emacs-lisp
  ;; start emacs in home folder
  (cd "~")

  ;; show matching parentheses by default
  (show-paren-mode)

  ;; disable auto-save and auto-backup
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;; turn off annoying Emacs splash screen
  (setq inhibit-splash-screen t)

  ;; disable some warnings when compiling init file
  (setq warning-minimum-level :error)

  ;; allow y-or-n instead of yes-or-no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; always follow symbolic links
  (setq vc-follow-symlinks t)

  ;; scroll properly, not stupid emacs way
  (setq scroll-conservatively 101)
  (setq mouse-wheel-scroll-amount '(1))
  (setq mouse-wheel-progressive-speed nil)

  ;; refresh buffers if they are changed outside of emacs
  (global-auto-revert-mode 1)

  ;; show line number and ruler when programming, and enable code folding
  (add-hook 'prog-mode-hook (lambda () 
			      (display-fill-column-indicator-mode 1)
			      (display-line-numbers-mode 1)
			      (hs-minor-mode 1)
			      (diminish 'hs-minor-mode)))

  ;; turn off bell
  (setq ring-bell-function 'ignore)

  ;; create eshell alias for find-file function
  (defalias 'ff 'find-file)

  ;; enable emacs server
  (server-mode 1)

  ;; turn off indicator for wrapping text
  (setf (cdr (assq 'continuation fringe-indicator-alist))
	'(nil nil))

  ;; disable *Messages* buffer that is present on startup
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")

  ;; set default wrap length
  (setq-default fill-column 80)
#+end_src

* MacOS Specific
Some macOS specific options. Comment out if not on a macOS machine

Get transparent header-bars
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar .t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon nil)
  (setq frame-title-format nil)
#+end_src

Open new files from Finder in previously opened frame
#+begin_src emacs-lisp
  (setq ns-pop-up-frames nil)
#+end_src

Remap red close button to only hide the frame
#+begin_src emacs-lisp
  (defun handle-delete-frame-without-kill-emacs (event)
    "Handle delete-frame events from the X server."
    (interactive "e")
    (let ((frame (posn-window (event-start event)))
	  (i 0)
	  (tail (frame-list)))
      (while tail
	(and (frame-visible-p (car tail))
	     (not (eq (car tail) frame))
	     (setq i (1+ i)))
	(setq tail (cdr tail)))
      (if (> i 0)
	  (delete-frame frame t)
	;; Not (save-buffers-kill-emacs) but instead:
	(ns-do-hide-emacs))))
	;; can change to (suspend-frame) on non mac systems
  (when (eq system-type 'darwin)
    (advice-add 'handle-delete-frame :override
		#'handle-delete-frame-without-kill-emacs))
#+end_src

Get proper characters on ISO-UK Macbook Pro keyboard
#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "M-3") (kbd "#"))
  (define-key key-translation-map (kbd "M-2") (kbd "â‚¬"))
#+end_src

* Themes
A nice collection of themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :defer t)
#+end_src

Load selected theme
#+begin_src emacs-lisp
(load-theme 'doom-dracula t)
#+end_src

* Mode Line
Change the font colours in the modeline
#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil
                    :background "#353644"
                    :foreground "white"
                    :overline nil
                    :underline nil)
#+end_src

I use doom modeline since it is lightweight and pretty
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-height 10)
    (setq doom-modeline-bar-width 1)
    (setq doom-modeline-icon nil)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-perp-name t)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-env-version nil)
    :config
    (doom-themes-org-config)
    (doom-modeline-mode 1))
#+end_src

* Magit
Magit is a wonderful git frontend for emacs
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src

* Evil
I am an ex-vim user so I use evil for my editing

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-insert-state-message nil)
    (setq evil-visual-state-message nil)
    (setq evil-mode-line-format '(before . mode-line-front-space))
    (setq evil-normal-state-tag "NORMAL")
    (setq evil-insert-state-tag "INSERT")
    (setq evil-visual-state-tag "VISUAL")
    (setq evil-operator-state-tag "OPERATOR")
    (setq evil-motion-state-tag "MOTION")
    (setq evil-emacs-state-tag "EMACS")
    :bind ("<escape>" . keyboard-escape-quit)
    :config
    (evil-mode 1))
#+end_src

Evil collection fixes evil-mode in a lot of places
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :init
    (setq evil-want-C-i-jump nil)
    :config
    (evil-collection-init))
#+end_src

Undo-tree is a dependancy, but is not installed automatically for some reason
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    ;; (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

Port of vim commentary plugin
#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode 1))
#+end_src

Port of vim surround plugin
#+begin_src emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

* Company
I use company for all my autocompletion needs
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-tooltip-align-annotations t)
    (setq company-tooltip-limit 15)
    :hook ((pdf-view-mode . (lambda () (company-mode -1)))
	   (eshell-mode . (lambda () (company-mode -1)))
	   (term-mode . (lambda () (company-mode -1)))
           (shell-mode . (lambda () (company-mode -1))))
    :config
    (global-company-mode)
    (push ".fbd_latexmk" company-files-exclusions)
    (push ".aux" company-files-exclusions)
    (push ".log" company-files-exclusions)
    (push ".pdf" company-files-exclusions)
    (push ".bcf" company-files-exclusions)
    (push ".gz" company-files-exclusions)
    (push ".blg" company-files-exclusions)
    (push ".fls" company-files-exclusions)
    (delete 'company-dabbrev company-backends))
#+end_src

* Projectile
I use projectile to manage projects
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :bind-keymap
    ("C-x p" . projectile-command-map))
#+end_src

* Which Key
Which key is useful for discoverability
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-idle-delay 2)
    (setq which-key-idle-secondary-delay 0)
    :config
    (which-key-mode))
#+end_src

* Exec Path From Shell
This simply gets the shell variable and path from default shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

* Vterm
I use vterm as my terminal because it is a lot better than ansi-term. You will
need to have some dependencies installed for this, which can be done in mac with: 
brew install cmake libtool libvterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t
    :bind ("C-c t t" . vterm))
#+end_src

* Perspective Mode
I use this for managing workspaces inside Emacs
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :defer t
    :bind (("C-x C-i" . persp-ibuffer)
	   ("C-x k" . persp-kill-buffer*)
	   ("C-x C-k" . persp-kill-buffer*)
	   ("C-x x h" . persp-prev)
	   ("C-x x l" . persp-next)
	   ("C-x x s" . persp-switch)
	   ("C-x x i" . persp-import)
	   ("C-x x r" . persp-rename)
	   ("C-x x C-l" . persp-state-load)
	   ("C-x x C-s" . persp-state-save))
    :init
    (custom-set-faces '(persp-selected-face ((t (:foreground "#FD7CC5")))))
    :config
    (persp-mode 1))
#+end_src
