#  $$$$$$\            $$\ $$$$$$$\                      
# $$  __$$\           \__|$$  __$$\                     
# $$ /  \__| $$$$$$\  $$\ $$ |  $$ |$$\   $$\  $$$$$$$\ 
# \$$$$$$\   \____$$\ $$ |$$ |  $$ |$$ |  $$ |$$  _____|
#  \____$$\  $$$$$$$ |$$ |$$ |  $$ |$$ |  $$ |$$ /      
# $$\   $$ |$$  __$$ |$$ |$$ |  $$ |$$ |  $$ |$$ |      
# \$$$$$$  |\$$$$$$$ |$$ |$$$$$$$  |\$$$$$$  |\$$$$$$$\   Sai Pandian
#  \______/  \_______|\__|\_______/  \______/  \_______|  github.com/saiduc
# ------------------------------------------------------------------------
#+STARTIP: overview

* Setting up New Installation
Execute the Package Installation section manually with C-c C-c in the src blocks.
Then save the file and let it compile into a .elc file
Then restart emacs and everything should be working!
You might have to change the location of the specified miniconda...

* Package Installation Setup
Here I set up the pacakge repositories we will be pulling from.
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

If use-package isn't already installed, install it
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

Here, I let emacs load the files for any manually added packages in the .emacs.d/lisp/ folder
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

* General Tweaks to Emacs
#+BEGIN_SRC emacs-lisp
(show-paren-mode)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq inhibit-splash-screen t)

;; disable emacs completion window
(setq completion-auto-help 'lazy)

;; disable some warnings when compiling init file
(setq warning-minimum-level :error)

;; allow y-or-n instead of yes-or-no
(defalias 'yes-or-no-p 'y-or-n-p)

;; scroll properly, not stupid emacs way
(setq scroll-conservatively 101)
(setq mouse-wheel-scroll-amount '(1))
(setq mouse-wheel-progressive-speed nil)

;; disable tool bar and scroll bar and menu bar if not in mac
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; show line number and highlight current line
(global-display-line-numbers-mode)
;; (global-hl-line-mode t)

;; disable line number in terminals and turn on hs minor mode when programming
(add-hook 'prog-mode-hook (lambda () (hs-minor-mode 1)))
(add-hook 'prog-mode-hook (lambda () (diminish 'hs-minor-mode)))
(add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'eshell-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'help-mode-hook (lambda () (display-line-numbers-mode -1)))

;; turn off bell
(setq ring-bell-function 'ignore)

(defalias 'ff 'find-file)

;; enable emacs server
(server-mode 1)

;; turn off indicator for wrapping text
(setf (cdr (assq 'continuation fringe-indicator-alist))
      '(nil nil))

(setq-default message-log-max nil)
(kill-buffer "*Messages*")

;; make emacs open maximised
(toggle-frame-maximized)
#+END_SRC

* MacOS Specific
If you install with brew install emacs-plus, there is a chance that Alfred will
not find the symlink. In this case, make a folder in /Applications called
Emacs.app, then delete the folder. And then do the symlink, and this will let
Alfred see it. It's a bit of a hack but it works.

#+BEGIN_SRC emacs-lisp
(set-frame-font "Inconsolata 16" nil t)

;; get pretty header bard in macOS
(add-to-list 'default-frame-alist '(ns-transparent-titlebar .t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)

;; open new files from finder in already opened frame
(setq ns-pop-up-frames nil)

;; only hide emacs when x button pressed
(defun handle-delete-frame-without-kill-emacs (event)
  "Handle delete-frame events from the X server."
  (interactive "e")
  (let ((frame (posn-window (event-start event)))
        (i 0)
        (tail (frame-list)))
    (while tail
      (and (frame-visible-p (car tail))
           (not (eq (car tail) frame))
           (setq i (1+ i)))
      (setq tail (cdr tail)))
    (if (> i 0)
        (delete-frame frame t)
      ;; Not (save-buffers-kill-emacs) but instead:
      (ns-do-hide-emacs))))
      ;; can change to (suspend-frame) on non mac systems
(when (eq system-type 'darwin)
  (advice-add 'handle-delete-frame :override
              #'handle-delete-frame-without-kill-emacs))
#+END_SRC

* Themes
I use Dracula theme
#+begin_src emacs-lisp
(use-package dracula-theme
  :ensure t
  :defer t
  :init
  (load-theme 'dracula t))
#+end_src

* Mode Line
I change the font colours in the modeline
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :background "#353644"
                    :foreground "white"
                    :overline nil
                    :underline nil)
#+END_SRC

Doom modeline is much lighter but still looks quite pretty
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :defer t
  :init
  (setq doom-modeline-height 10)
  (setq doom-modeline-bar-width 1)
  (setq doom-modeline-icon nil)
  (setq doom-modeline-minor-modes t)
  (setq doom-modeline-perp-name t)
  (setq doom-modeline-env-version nil)
  (doom-modeline-mode 1))
#+end_src

* Autopair
#+BEGIN_SRC emacs-lisp
(use-package autopair
 :ensure t
 :defer t
 :init
 (autopair-global-mode)
 (add-hook 'org-mode-hook #'(lambda ()
                              (push ?< (getf autopair-dont-pair :everywhere)))))
#+END_SRC
* Magit
Magit is a wonderful git frontend for emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init
  (add-hook 'magit-mode-hook (lambda ()
			       (diminish 'auto-revert-mode)))
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

* Evil
I am an ex-vim user so I use evil for my editing

Evil-collection fixes evil mode in many places
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :ensure t
  :defer t
  :init
  (setq evil-want-C-i-jump nil)
  (setq evil-want-keybinding nil)
  (evil-collection-init))
#+END_SRC

Evil must be done after Evil collection
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer t
  :init
  (setq evil-want-keybinding nil)
  (setq evil-insert-state-message nil)
  (setq evil-visual-state-message nil)
  (setq evil-mode-line-format '(before . mode-line-front-space))
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-visual-state-tag "VISUAL")
  (setq evil-operator-state-tag "OPERATOR")
  (setq evil-motion-state-tag "MOTION")
  (setq evil-emacs-state-tag "EMACS")
  (evil-mode 1))
#+END_SRC

Evil commentary is a port of vim's commentary
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :defer t
  :init
  (evil-commentary-mode 1))
#+END_SRC

Useful port of vim surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :defer t
  :init
  (global-evil-surround-mode 1))
#+END_SRC

Provides evil mode bindings in magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :ensure t
  :defer t
  :init
  (add-hook 'magit-mode-hook (lambda () (evil-magit-init))))
#+END_SRC

Get evil bindings in org-agenda
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :defer t
  :init
  (add-hook 'org-mode-hook 'evil-org-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

Evil numbers for incrementing and decrementing
#+begin_src emacs-lisp
(use-package evil-numbers
  :ensure t
  :defer t
  :init
  (define-key evil-normal-state-map (kbd "C-c C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c C--") 'evil-numbers/dec-at-pt))
#+end_src

* Iedit
Iedit allows for multiple cursor-like functionality
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t
  :defer t)
#+END_SRC

* Company
I use company for all my autocompletion needs
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init
  (global-company-mode)
  (push ".fbd_latexmk" company-files-exclusions)
  (push ".aux" company-files-exclusions)
  (push ".log" company-files-exclusions)
  (push ".pdf" company-files-exclusions)
  (push ".bcf" company-files-exclusions)
  (push ".gz" company-files-exclusions)
  (push ".blg" company-files-exclusions)
  (push ".fls" company-files-exclusions)
  (delete 'company-dabbrev company-backends)
  (company-tng-configure-default)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-limit 15)
  (add-hook 'pdf-view-mode-hook (lambda () (company-mode -1)))
  (add-hook 'eshell-mode-hook (lambda () (company-mode -1)))
  (add-hook 'term-mode-hook (lambda () (company-mode -1)))
  (add-hook 'shell-mode-hook (lambda () (company-mode -1))))
#+END_SRC

* Projectile
I use projectile to manage projects
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :init
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))
#+END_SRC

* Which Key
I use which key to show me possible keyboard shortcuts
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer t
  :init
  (setq which-key-idle-delay 0.3)
  (setq which-key-idle-secondary-delay 0.05)
  (which-key-mode))
#+END_SRC

* Exec Path From Shell
This simply gets the shell variable and path from default shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer t
  :init
  (setq exec-path-from-shell-check-startup-files nil)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC

* Vterm
I use vterm as my terminal because it is a lot better than ansi-term. You will
need to have some dependencies installed for this, which can be done in mac with: 
brew install cmake libtool libvterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :defer t)
#+end_src

* Perspective Mode
I use this for managing workspaces inside Emacs. Might be redunant with tabs in
Emacs 27
#+begin_src emacs-lisp
(use-package perspective
  :ensure t
  :defer t
  :init
  (global-set-key (kbd "C-x b") 'persp-ivy-switch-buffer)
  (global-set-key (kbd "C-x k") 'persp-kill-buffer*)
  (global-set-key (kbd "C-x C-k") 'persp-kill-buffer*)
  (global-set-key (kbd "C-x x h") 'persp-prev)
  (global-set-key (kbd "C-x x l") 'persp-next)
  (custom-set-faces '(persp-selected-face ((t (:foreground "#FD7CC5")))))
  (persp-mode 1))
#+end_src

* Ivy, Counsel & Swiper
Counsel and Ivy-mode for completion
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :defer t)

(use-package counsel
  :ensure t
  :defer t
  :init
  (global-set-key "\C-s" 'swiper)
  (setq counsel-fzf-cmd "rg --files --no-ignore --hidden --follow --glob '!.git/*'")
  (counsel-mode 1))

(use-package ivy
  :ensure t
  :defer t
  :init
  ;; (custom-set-faces '(ivy-current-match ((t (:background "#FF0000")))))
  (setq ivy-initial-inputs-alist nil)
  (setq enable-recursive-minibuffers t)
  (setq ivy-height 15)
  (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-next-line)
  (define-key ivy-minibuffer-map (kbd "C-k") #'ivy-previous-line)
  (define-key ivy-switch-buffer-map (kbd "C-j") #'ivy-next-line)
  (define-key ivy-switch-buffer-map (kbd "C-k") #'ivy-previous-line)
  (define-key ivy-minibuffer-map (kbd "<return>") #'ivy-alt-done)
  (global-set-key (kbd "M-p") 'counsel-yank-pop)
  (setq projectile-completion-system 'ivy)
  (ivy-mode 1))
#+end_src

* Dashboard
Dashboard is the starting page when opening emacs
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :defer t
  :init
  (setq dashboard-startup-banner 2)
  (setq dashboard-set-init-info t)
  (setq dashboard-items '((recents  . 15)
			    (projects . 5)
			    ;; (agenda . 5)
			    (bookmarks . 10)))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-center-content t)
  (dashboard-setup-startup-hook)
  (add-hook 'dashboard-mode-hook (lambda() (display-line-numbers-mode -1))))
#+END_SRC

* Emacs Start Up Profiler
I use esup to help profile my emacs to optimise startup time
#+BEGIN_SRC elisp
(use-package esup
  :ensure t
  :defer t)
#+END_SRC

* PDF Tools
PDF Tools is a better way to view PDFs than Docview 
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :defer t
  :config
  (custom-set-variables
  '(pdf-tools-handle-upgrades nil))
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (setq pdf-view-use-scaling t)
  (setq mouse-wheel-follow-mouse t)
  (setq-default pdf-view-display-size 'fit-page)
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
  (add-hook 'pdf-view-mode-hook (lambda() (line-number-mode -1)))
  (setq pdf-view-use-scaling t)
  :init
  (setq pdf-view-midnight-colors '("#ffffff" . "#000000"))
  (setq pdf-view-use-scaling t)
  (pdf-loader-install))
#+END_SRC

* Dired
Make dired work as expected
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

* YASnippets
This package allows for useful snippet expansion
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t)
#+end_src

Now we need to get some actual snippets:
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t
  :defer t)
#+end_src

* CSV Mode
Viewing CSVs is often useful
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :ensure t
  :defer t
  :init
  (setq csv-align-padding 3)
  (add-hook 'csv-mode-hook (lambda () (csv-header-line)
                                      (csv-align-mode)
                                      (display-line-numbers-mode -1)
                                      (linum-mode 1))))
#+END_SRC

* Markdown Mode
Mode for editing markdown documents
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t)
#+end_src

* Org Mode
Required for org mode versions >9.2
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (require 'org-tempo)))
#+end_src

This gets org mode working with python, jupyter and emacs-lisp
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages 
			     '((emacs-lisp . t) 
			       (python . t) 
			       (jupyter . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :defer t
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Tell Org mode to make pdfs from latex with syntax highlighting for source blocks
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Allow export to beamer
#+BEGIN_SRC emacs-lisp
(use-package ox-beamer
  :config
  (eval-after-load "ox-latex"
      '(add-to-list 'org-latex-classes
                    `("beamer"
                      ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC

General Org Mode settings
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars nil)
(setq org-startup-indented t)
(setq org-hide-emphasis-markers t)

(require 'color)
(set-face-attribute 'org-block nil :background
                     (color-darken-name
                     (face-attribute 'default :background) 3))

(setq org-confirm-babel-evaluate nil)

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

(setq org-src-fontify-natively t)
(setq org-edit-src-content-indentation 0)
(setq org-src-tab-acts-natively t)

(setq-default fill-column 80)
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

* Flycheck
Flycheck is a general linting package that other linters can plug into.
It seems to work better than Flymake out of the box, except in Python where Elpy
mode's included Flymake works well
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init
  (setq flycheck-check-syntax-automatically '(mode-enabled save)))
#+end_src

* Flyspell
On the go spell-checking in Emacs
You will need to install aspell on your system for this to work. On MacOS:
brew install aspell

#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/aspell")
(setq ispell-dictionary "british") 
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src

* LaTeX
I use AucTeX for all LateX stuff, but for some reason, this doesn't always work
through use-package. Install it directly from Melpa instead
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t
  :defer t
  :config
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(setq-default TeX-master t)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'yas-minor-mode)
(setq-default fill-column 80)
(setq TeX-source-correlate-method 'synctex)
(setq TeX-source-correlate-start-server t)
#+END_SRC

The completion is handled by Company-AucTeX
#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :ensure t
  :defer t)

(use-package company-reftex
  :ensure t
  :defer t
  :init
  ;; can probably move the hook into hook: in company-auctex usepackage
  (add-hook 'LaTeX-mode-hook (lambda ()
			       (company-auctex-init)
			       (eval-after-load "company"
				 '(add-to-list 'company-backends 'company-reftex-labels))
			       (eval-after-load "company"
				 '(add-to-list 'company-backends 'company-reftex-citations))))
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t))
#+END_SRC

Compile with Latexmk, since it works better
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'tex
    (auctex-latexmk-setup))
  (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "LatexMk")))
  (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+END_SRC

I can use PDF tools or Skim.app to view PDFs. If PDF tools, then auto update
buffer after compilation
#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-selection '((output-pdf "PDF Viewer"))
  	;; TeX-view-program-list '(("PDF Viewer" TeX-pdf-tools-sync-view))
  	TeX-view-program-list '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))
  	TeX-source-correlate-start-server t)
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
(add-hook 'LaTeX-mode-hook 'flycheck-mode)
#+END_SRC

* Python
I am using Elpy because it remains fast and is feature rich. You will need to
make your own elpy virtual environment with conda, and point to it with the
elpy-rpc-virtualenv-path variable
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (setq elpy-rpc-virtualenv-path (expand-file-name "~/miniconda3/envs/elpy"))
  (advice-add 'python-mode :before 'elpy-enable)
  (setq elpy-rpc-error-timeout 30)
  (setq elpy-rpc-timeout 30)
  :config
  (remove-hook 'elpy-modules 'elpy-module-pyvenv)
  (remove-hook 'elpy-modules 'elpy-module-django)
  (add-hook 'conda-postactivate-hook (lambda () (elpy-rpc-restart)))
  (define-key elpy-mode-map (kbd "M-]") 'elpy-goto-definition)
  (define-key elpy-mode-map (kbd "M-[") 'pop-tag-mark)
  (add-hook 'python-mode-hook (lambda () (diminish 'highlight-indentation-mode)))
  (diminish 'hs-minor-mode))
#+END_SRC

Elpy works faster and neater than Anaconda-mode from my experience, especially
when importing new modules. But supposedly Anaconda-mode is lighter. And so is
Jedi, but neither offer as many features as Elpy. 

Conda handles switching virtual environments
#+BEGIN_SRC emacs-lisp
(use-package conda
  :ensure t
  :defer t
  :init
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  :config
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell))
#+END_SRC

* Cython
Sometimes I use cython for the best of both C and Python and it is nice to have
some syntax higlighting
#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :ensure t
  :defer t
  :init
  (add-hook 'cython-mode-hook (lambda () (flymake-mode -1))))
#+END_SRC

* Jupyter
I use Emacs Jupyter for jupyter notebooks
#+BEGIN_SRC emacs-lisp
(use-package jupyter
  :ensure t
  :defer t
  :init
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3"))))

;; jupyter needs to refresh its aliases if you change virtualenv using conda
(defun my/get-jupyter-aliases ()
  (interactive)
  (org-babel-jupyter-aliases-from-kernelspecs))

(add-hook 'conda-postactivate-hook (lambda () (my/get-jupyter-aliases)))

(add-to-list 'org-structure-template-alist '("j" . "src jupyter-python"))
#+END_SRC

Allow export to jupyter notebooks. This is a local file, not available on
melpa. If you don't have it, download it from: [[https://github.com/jkitchin/ox-ipynb][ox-ipynb]] and put it in .emacs.d/lisp/
#+BEGIN_SRC emacs-lisp
(use-package ox-ipynb)
#+END_SRC

* VimScript
Occasionally I have to edit a vimrc file so syntax highlighting is nice.
#+begin_src emacs-lisp
(use-package vimrc-mode
  :ensure t
  :defer t)
#+end_src

* C/C++
You might need to install libclang for the completion to work properly
On macOS, this simply involves installing Xcode Commandline tools

Set up eldoc mode to work with C++
#+begin_src emacs-lisp
(use-package c-eldoc
  :ensure t
  :defer t
  :init
  (setq c-eldoc-buffer-regenerate-time 3)
  (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
  (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode))
#+end_src

Set up c++ to use the style I like and enable some minor modes
#+begin_src emacs-lisp
(setq c-default-style "linux")
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c++-mode-hook 'yas-minor-mode)
#+end_src

* General Key Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t t") 'vterm)
(global-set-key (kbd "C-c t e") 'eshell)
(global-set-key (kbd "C-c t j") 'jupyter-run-repl)
(define-key key-translation-map (kbd "M-3") (kbd "#"))
(define-key key-translation-map (kbd "M-2") (kbd "€"))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(windmove-default-keybindings)
#+END_SRC

* Auto Update Packages
This package allows me to set autoupdate of packages
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :defer t
  :init
  (setq auto-package-update-delete-old-versions t
	auto-package-update-prompt-before-update t
	auto-package-update-interval 7)
  (auto-package-update-maybe))
#+end_src

* Diminished Modes
I diminish modes last since otherwise it doesn't seem to work
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :defer t
  :init
  (diminish 'page-break-lines-mode)
  (diminish 'counsel-mode)
  (diminish 'ivy-mode)
  (diminish 'yas-minor-mode)
  (diminish 'projectile-mode)
  (diminish 'undo-tree-mode)
  (diminish 'hs-minor-mode)
  (diminish 'evil-commentary-mode)
  (diminish 'eldoc-mode)
  (diminish 'auto-revert-mode)
  (diminish 'autopair-mode)
  (diminish 'which-key-mode)
  (diminish 'company-mode)
  (diminish 'highlight-indentation-mode)
  (diminish 'beacon-mode)
  (diminish 'persp-mode)
  (diminish 'electric-pair-mode))

#+END_SRC


